trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  aws_region: 'us-east-1'
  instance_type: 't2.micro'
  vpc_name: 'demo-vpc'
  main_cidr_block: '11.0.0.0/16'
  subnet_cidr_block: '["11.0.1.0/24","11.0.2.0/24","11.0.3.0/24","11.0.4.0/24"]'
  availability_zones: '["us-east-1a","us-east-1b","us-east-1c","us-east-1d"]'

parameters:
- name: IsSetupInfrastructure
  type: boolean
  default: false
- name: IsTeardownInfrastructure
  type: boolean
  default: false

stages:
- ${{ if eq(parameters.IsSetupInfrastructure, true) }}:
  #Stage 1 - Terraform Initialization
  - stage: Init
    displayName: "Terraform Init Stage"
    jobs:
    - job: Init
      displayName: "Terraform Init Job"
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "The pipeline YAML file is located at:"
            echo "$(System.DefaultWorkingDirectory)"
            echo "You can append relative paths to this if needed."
      # - task: TerraformTaskV4@4
      #   name: 'terraformInit'
      #   displayName: 'Initialize Terraform'
      #   inputs:
      #     provider: 'aws'
      #     command: 'init'         
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
      #     backendType: 's3'
      #     backendAWSRegion: 'us-east-1'
      #     backendServiceAWS: 'aws-terraform-svc'
      #     backendAWSBucketName: 'terraform-state-for-demo-vpc'
      #     backendAWSKey: 'tf/terraform.tfstate'
      #     backendAWSDynamoDBTableName: 'terraform-locks'
  #Stage 2 - Terraform Plan
  - stage: Plan
    displayName: "Terraform Plan Stage"
    jobs:
    - job: Plan
      displayName: "Terraform Plan Job"
      steps:
      - task: TerraformTaskV4@4
        name: 'terraformPlan'
        displayName: 'Plan Terraform'
        inputs:
          provider: 'aws'
          command: 'plan'
          workingDirectory: '$(Build.SourcesDirectory)/IaC'
          commandOptions: >
            '-out main.tfplan'
            -var 'instance_type=$(instance_type)'
            -var 'vpc_name=$(vpc_name)'
            -var 'main_cidr_block=$(main_cidr_block)'
            -var 'subnet_cidr_block=$(subnet_cidr_block)'
            -var 'availability_zones=$(availability_zones)'
          environmentServiceNameAWS: 'aws-terraform-svc'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.SourcesDirectory)/main.tfplan'
          artifactName: 'terraformPlan'
          publishLocation: 'pipeline'
  #Stage 3 - Terraform Apply
  - stage: Apply
    displayName: "Terraform Apply Stage"
    jobs:
    - job: Apply
      displayName: "Terraform Apply Job"
      steps:
      - task: TerraformTaskV4@4
        name: 'terraformApply'
        displayName: 'Apply Terraform'
        condition: and(succeeded(), eq(variables['terraformPlan.changesPresent'], 'true'))
        inputs:
          provider: 'aws'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
          commandOptions: 'main.tfplan'
          environmentServiceNameAWS: 'aws-terraform-svc'


#Stage 2 - Teardown Infrasturture
- ${{ if eq(parameters.IsTeardownInfrastructure, true) }}:
  - stage: InfrastructureTeardown
    displayName: 'Infrastructure Teardown'
    jobs:
    - job: TerraformIaC
      displayName: 'Infrastructure Teardown'
      steps:

      - task: TerraformTaskV4@4
        name: 'terraformInit'
        displayName: 'Initialize Terraform'
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
          backendType: 's3'
          backendAWSRegion: 'us-east-1'
          backendServiceAWS: 'aws-terraform-svc'
          backendAWSBucketName: 'terraform-state-for-demo-vpc'
          backendAWSKey: 'tf/terraform.tfstate'
          backendAWSDynamoDBTableName: 'terraform-locks'

      - task: TerraformTaskV4@4
        name: 'terraformPlan'
        displayName: 'Plan Terraform'
        inputs:
          provider: 'aws'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
          commandOptions: '-out main.tfplan'
          environmentServiceNameAWS: 'aws-terraform-svc'

      - task: TerraformTaskV4@4
        name: 'terraformDestroy'
        displayName: 'Destroy Terraform'
        inputs:
          provider: 'aws'
          command: 'destroy'
          workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
          environmentServiceNameAWS: 'aws-terraform-svc'